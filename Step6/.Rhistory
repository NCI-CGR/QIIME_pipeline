# Plot by SampleType
p<- plot_ordination(
physeq = physeq_scale,
ordination = physeq_pcoa,
color = "SampleType",
title = "PCoA of Sample Type (Weighted Unifrac)"
) +
scale_color_manual(values = c("#a65628", "red", "#ffae19",
"#4daf4a", "#1919ff", "darkorchid3", "magenta")
) +
geom_point(aes(color = SampleType), alpha = 0.7, size = 6) +
geom_point(colour = "grey90", size = 1.5)
#Save file
file_name =("Graphs/sampletype_weightunifrac.tiff")
tiff(file_name, width=800)
print(p)
dev.off()
# Plot by Subject
p<- plot_ordination(
physeq = physeq_scale,
ordination = physeq_pcoa,
color = "Subject",
title = "PCoA by Subject ID (Weighted Unifrac)"
) +
geom_point(aes(color = Subject), alpha = 0.7, size = 6) +
geom_point(colour = "grey90", size = 1.5)
#Save file
file_name =("Graphs/subjectid_weightunifrac.tiff")
tiff(file_name, width=800)
print(p)
dev.off()
# Chunk 9
#https://joey711.github.io/phyloseq/plot_bar-examples.html
# Scale reads to even depth
physeq_scale <- physeq_filt %>% scale_reads(n=1000)
#Sample Type
p<- plot_richness(physeq_scale, x="SampleType") + geom_boxplot()
file_name =("Graphs/sampletype_alphadiv.tiff")
tiff(file_name, width=800)
print(p)
dev.off()
#SubjectID
p<- plot_richness(physeq_scale, x="Subject") + geom_boxplot()
file_name =("Graphs/subjectid_alphadiv.tiff")
tiff(file_name, width=1000)
print(p)
dev.off()
#Filter the top Genus
TopNOTUs = names(sort(taxa_sums(physeq_filt_samples), TRUE)[1:100])
physeq_scale10 = prune_taxa(TopNOTUs, physeq_filt_samples)
#Create sample list
sample_list<-unique(sample_data(physeq_filt_samples)$Subject)
#Create plot list
plot_list <- list()
i = 1
#Iterate through each subject and create bar graph of the top 10 Genus
for (a in sample_list){
#Create sample phylo object
physeq_subset<- subset_samples(physeq_scale10, Subject==a)
#Create graph of this object
p<- plot_bar(physeq_subset, "Genus", fill = "Genus", facet_grid = ~SampleType, title=a)+geom_bar(stat="identity")+theme(legend.position = "none")
#Save to plot list and iterate
plot_list[[i]] = p
i=i+1
}
#Print the final image
n<- length(plot_list)
nCol <- floor(sqrt(n))
p_final <- marrangeGrob(plot_list,nrow=2, ncol=3)
ggsave("Graphs/subjectid_topgenus.pdf",p_final)
plot_list
library(gridExtra)
p_final <- marrangeGrob(plot_list,nrow=2, ncol=3)
ggsave("Graphs/subjectid_topgenus.pdf",p_final)
#Filter the top Genus
TopNOTUs = names(sort(taxa_sums(physeq_filt_samples), TRUE)[1:100])
physeq_scale10 = prune_taxa(TopNOTUs, physeq_filt_samples)
#Create sample list
sample_list<-unique(sample_data(physeq_filt_samples)$Subject)
#Create plot list
plot_list <- list()
i = 1
#Iterate through each subject and create bar graph of the top 10 Genus
for (a in sample_list){
#Create sample phylo object
physeq_subset<- subset_samples(physeq_scale10, Subject==a)
#Create graph of this object
p<- plot_bar(physeq_subset, "Genus", fill = "Genus", facet_grid = ~SampleType, title=a)+geom_bar(stat="identity")+theme(legend.position = "none", axis.text.x=element_blank())
#Save to plot list and iterate
plot_list[[i]] = p
i=i+1
}
#Print the final image
n<- length(plot_list)
nCol <- floor(sqrt(n))
p_final <- marrangeGrob(plot_list,nrow=2, ncol=3)
ggsave("Graphs/subjectid_topgenus.pdf",p_final)
p_final[1]
ggsave("Graphs/subjectid_topgenus.jpeg",p_final[1])
n
#Print each page to a PDF
partialplot_list <- plot_list[1:6]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
ncol
nCol
#Print each page to a JPEG
a=1
n<- length(plot_list)
nCol <- floor(sqrt(n))
until (a<n){
n=n+1
print "a"
}
print a
print (a)
until (a>n){
n=n+1
print (a)
}
until (a>n){
n=n+1
print (a)
}
while (a<n){
n=n+1
print (a)
}
while (a<n){
a=a+1
print (a)
}
n
#Print each page to a JPEG
a=1
n<- length(plot_list)
nCol <- floor(sqrt(n))
while (a<n){
a=a+1
print (a)
}
remove nCol
remove(nCol)
npages <- floor(sqrt(n))
npages
print (a+5)
#Print each page to a JPEG
a=1
n<- length(plot_list)
npages <- floor(sqrt(n))
while (a<n){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
n=31
while (a<n){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
#Print each page to a JPEG
a=1
while (a<n){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
n
while (a<n*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
#Print each page to a JPEG
a=1
n<- length(plot_list)
npages <- floor(sqrt(n))
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
n=31
npages <- floor(sqrt(n))
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
#Print each page to a JPEG
a=1
npages <- floor(sqrt(n))
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
npages
n
round(x/6,0)
round(n/6,0)
n
round(n/6,1)
roundup(n/6,1)
floor(n/6,1)
floor(n/6)
ceiling(n/6)
npages <- ceiling(sqrt(n))
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
#Print each page to a JPEG
a=1
npages <- ceiling(sqrt(n))
while (a<6*npages){
#partialplot_list <- plot_list[1:6]
#p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
#ggsave("Graphs/subjectid_topgenus.jpeg",p_final)
print (a)
print (a+5)
a=a+6
}
pagenum=1
filename<- paste("Graphs/subjectid_topgenus",".jpeg",sep=pagenum)
filename<- paste("Graphs/subjectid_topgenus",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
filename
#Print each page to a JPEG
a=1
pagenum=1
n<- length(plot_list)
npages <- ceiling(sqrt(n))
while (a<6*npages){
if(a+5 > n){
partialplot_list <- plot_list[a:n]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
} else{
partialplot_list <- plot_list[a:a+5]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
}
a=a+6
pagenum=pagenum+1
}
a
#Print each page to a JPEG
a=1
pagenum=1
n<- length(plot_list)
npages <- ceiling(sqrt(n))
while (a<6*npages){
if(a+5 > n){
partialplot_list <- plot_list[a:n]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
} else{
partialplot_list <- plot_list[a:a+5]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
}
print (a)
a=a+6
pagenum=pagenum+1
}
#Print each page to a JPEG
a=1
pagenum=1
n<- length(plot_list)
npages <- ceiling(sqrt(n))
while (a<6*npages){
if(a+5 > n){
partialplot_list <- plot_list[a:n]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
} else{
end = a+5
partialplot_list <- plot_list[a:end]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
}
print (a)
a=a+6
pagenum=pagenum+1
}
#Print each page to a JPEG
a=1
pagenum=1
n<- length(plot_list)
npages <- ceiling(sqrt(n))
while (a<6*npages-1){
#If the page is not complete with images
if(a+5 > n){
partialplot_list <- plot_list[a:n]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
} else{
end = a+5
partialplot_list <- plot_list[a:end]
p_final <- marrangeGrob(partialplot_list,nrow=2, ncol=3)
filename<- paste("Graphs/subjectid_topgenus_",pagenum,sep="")
filename<- paste(filename,".jpeg",sep="")
ggsave(filename,p_final)
}
a=a+6
pagenum=pagenum+1
}
a<6*npages-1)
a<6*npages-1
a
6*npages-1
n
npages
npages <- ceiling(n/6)
npages
save.image("workspace.RData")
# Chunk 1
project_name="Project_NP0440_MB4_SSC"
# Chunk 2
#Old version of vegan
#require(devtools)
#install_version("vegan", version ="2.4-5", repos = "http://cran.us.r-project.org")
#http://joey711.github.io/phyloseq-demo/phyloseq-demo.html
library(tm)
library(vegan)
library("biom")
library(tidyr)
library(ggplot2)
library(cowplot)
library(scales)
library(phyloseq)
library(qiime2R)
library(tibble)
library(gridExtra)
#Source MiSeqR
#http://deneflab.github.io/MicrobeMiseq/
source("sources/miseqR.R")
#source("sources/Microbiome.Barplot.R")
#source("sources/Summarize.Taxa.R")
#source("sources/Make.Percent.R")
#source("sources/TidyConvert.R")
# Chunk 3
#https://github.com/jbisanz/qiime2R
#Create location link
project_location = paste("T:\\DCEG\\Projects\\Microbiome\\CGR_MB\\MicroBiome\\Testing\\",project_name,sep="")
#Read OTUS
otus <- read_qza(paste(project_location,"\\Output\\qza_results\\table_dada2_qza_merged_parts_final\\table_dada2_merged_final.qza",sep=""))
#Read rooted tree
tree <- read_qza(paste(project_location,"\\Output\\qza_results\\phylogeny_qza_results\\rooted_tree.qza",sep=""))
#Read Greengenes taxonomy file
taxonomy <- read_qza(paste(project_location,"\\Output\\qza_results\\taxonomy_qza_results\\taxonomy_greengenes.qza",sep=""))
##Edit dtable
tax_table<-do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table)<-c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table)<-taxonomy$data$Feature.ID
#read metadata
metadata <-read.table(paste(project_location,"\\Input\\manifest_qiime2.tsv",sep=""),sep='\t', header=T, row.names=1, comment="")
metadata<-metadata[-1,]#remove the second line that specifies the data type
#Create phylo object
physeq_complete<-phyloseq(otu_table(otus$data, taxa_are_rows = T), phy_tree(tree$data), tax_table(tax_table), sample_data(metadata))
physeq_complete #verify results are as expected
s<-summary(sample_data(physeq_complete))
capture.output(s, file = "Data/summary_prefilter.txt")
# Chunk 4
#Only bacteria
physeq_filt <- physeq_complete %>%
subset_taxa(
Kingdom == "k__Bacteria" &
Family  != "k__Bacteria; p__Proteobacteria; c__Alphaproteobacteria; o__Rickettsiales; f__mitochondria" &
Class   != "k__Bacteria; p__Cyanobacteria; c__Chloroplast"
)
physeq_filt
#Only samples
physeq_filt_samples <- physeq_filt %>%
subset_samples(
SampleType == "Study"
)
physeq_filt_samples #verify sample number
#Only controls
physeq_filt_cont <- physeq_filt %>%
subset_samples(
SampleType != "Study"
)
physeq_filt_cont #verify sample number
#Print summaries
a<-summary(sample_data(physeq_filt)$SampleType)
capture.output(a, file = "Data/summary_sampletype_prefilter.txt")
a<-summary(sample_data(physeq_filt)$Subject)
capture.output(a, file = "Data/summary_subject_prefilter.txt")
# Chunk 5
# Make a data frame with a column for the read counts of each sample
sample_sum_df <- data.frame(sum = sample_sums(physeq_filt),sample_data(physeq_filt))
colnames(sample_sum_df)
# Histogram of sample read counts by sampletype
p1<-ggplot(sample_sum_df, aes(x = sum, color=SampleType)) +
geom_histogram(fill="white",binwidth = 2500) +
xlab("Read counts") +
theme(axis.title.y = element_blank())
# Histogram of sample read counts by sample type
p2<-ggplot(sample_sum_df, aes(x = sum, color=Subject)) +
geom_histogram(fill="white",binwidth = 2500) +
xlab("Read counts") +
theme(axis.title.y = element_blank())
#Title
title <- ggdraw() + draw_label("Distribution of sample sequencing depth", fontface='bold')
#plot
p <- plot_grid(p1, p2)
# send to CL
p_final <- plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)) # rel_heights values control title
#Save file
file_name =("Graphs/SeqDepth_prefilter.tiff")
tiff(file_name, width=800)
print(p_final)
dev.off()
# Chunk 6
physeq_filt #note taxa number
physeq_filt = filter_taxa(physeq_filt, function(x) mean(x) > 1e-2, TRUE)
physeq_filt #note new taxa number and sample number
physeq_filt = prune_samples(sample_sums(physeq_filt) > 10000, physeq_filt)
physeq_filt #note new sample number
# Chunk 7
# Make a data frame with a column for the read counts of each sample
sample_sum_df <- data.frame(sum = sample_sums(physeq_filt),sample_data(physeq_filt))
colnames(sample_sum_df)
# Histogram of sample read counts by sampletype
p1<-ggplot(sample_sum_df, aes(x = sum, color=SampleType)) +
geom_histogram(fill="white",binwidth = 2500) +
xlab("Read counts") +
theme(axis.title.y = element_blank())
# Histogram of sample read counts by sample type
p2<-ggplot(sample_sum_df, aes(x = sum, color=Subject)) +
geom_histogram(fill="white",binwidth = 2500) +
xlab("Read counts") +
theme(axis.title.y = element_blank())
#Title
title <- ggdraw() + draw_label("Distribution of sample sequencing depth - Post Filtering", fontface='bold')
#plot
p <- plot_grid(p1, p2)
#Print to CL
p_final<- plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1)) # rel_heights values control title
#Save file
file_name =("Graphs/SeqDepth_filter.tiff")
tiff(file_name, width=800)
print(p_final)
dev.off()
#Print summaries
s<-summary(sample_data(physeq_filt))
capture.output(s, file = "Data/summary_filter.txt")
a<-summary(sample_data(physeq_filt)$SampleType)
capture.output(a, file = "Data/summary_sampletype_postfilter.txt")
a<-summary(sample_data(physeq_filt)$Subject)
capture.output(a, file = "Data/summary_subject_postfilter.txt")
a<-summary(sample_data(physeq_filt)$Month)
summary(sample_data(physeq_filt)$Month)
summary(sample_data(physeq_filt))
sample_data(physeq_filt)
a<-sample_data(physeq_filt)
capture.output(a, file = "Data/Tabinput.txt")
capture.output(a, file = "Data/Tabinput.xls")
capture.output(a, file = "Data/Tabinput.csv")
a
colnames(a)
write.table(a,"Data/Tabinput.txt")
